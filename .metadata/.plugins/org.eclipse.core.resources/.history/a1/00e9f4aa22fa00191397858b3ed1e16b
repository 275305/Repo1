package com.huskpower.tests;

import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;
import org.openqa.selenium.support.PageFactory;
import org.testng.annotations.Test;

import com.huskpower.pages.PropertyReader;
import com.huskpower.pages.SparkMeterDataPage;

import util.ReusableActions;

public class SparkMeterDataTest extends ReusableActions {

	PropertyReader reader = new PropertyReader();
	private static Logger lOGGER = Logger.getLogger(SparkMeterDataTest.class.getName());

	/* Test cases for read the url from excel sheets */
	@Test(priority = 0, enabled = true)
	public void getUrlValueFromPropertiesFile() throws Exception {
		PageFactory.initElements(driver, SparkMeterDataPage.class);
		
		/*read the cell value from property reader class*/
		try {
			int sheet = 0, row = 0, column = 0;
			List<Integer> list = reader.getSparkUrlValue();
			Iterator<Integer> itr = list.iterator();
			while (itr.hasNext()) {
				sheet = itr.next();
				row = itr.next();
				column = itr.next();
			}
			/*
			 * reading the url value from config.properties file and sending to
			 * excel sheet
			 */
			String url = SparkMeterDataPage.getSparkDataUrlValueFromExcel(sheet, row, column);
			/* sending the url value to spark browser */
			ReusableActions.initializeSparkBrowser(url);

		} catch (Exception e) {
			lOGGER.info("Test case failed" + e.getMessage());
			throw e;
		}

	}

	/* Test cases for read the EmailId from excel sheets */
	@Test(priority = 1, enabled = false)
	public void getEmailIDFromPropertiesFile() throws Exception {
		PageFactory.initElements(driver, SparkMeterDataPage.class);
		/*read the cell value from property reader class*/
		try {
			int sheet = 0, row = 0, column = 0;
			List<Integer> list = reader.getSparkEmailIdValue();
			Iterator<Integer> itr = list.iterator();
			while (itr.hasNext()) {
				sheet = itr.next();
				row = itr.next();
				column = itr.next();
			}
			/*
			 * reading the EmailId value from config.properties file and sending
			 * to excel sheet
			 */
			SparkMeterDataPage.getSparkEmailIdValueFromExcel(sheet, row, column);

		} catch (Exception e) {
			lOGGER.info("Test case failed" + e.getMessage());
			throw e;
		}

	}

	/* Test cases for read the Password from excel sheets */
	@Test(priority = 2, enabled = false)
	public void getPasswordFromPropertiesFile() throws Exception {
		PageFactory.initElements(driver, SparkMeterDataPage.class);
		try {
			int sheet = 0, row = 0, column = 0;
			List<Integer> list = reader.getSparkPasswordValue();
			Iterator<Integer> itr = list.iterator();
			while (itr.hasNext()) {
				sheet = itr.next();
				row = itr.next();
				column = itr.next();
			}
			/*
			 * reading the password value from config.properties file and
			 * sending to excel sheet
			 */
			SparkMeterDataPage.getSparkPasswordValueFromExcel(sheet, row, column);

		} catch (Exception e) {
			lOGGER.info("Test case failed" + e.getMessage());
			throw e;
		}

	}

	/*
	 * Test cases for history tab, transaction tab,click tool bar and download
	 * export link
	 */
	@Test(priority = 3, enabled = false)
	public void historyTransactionatHomePage() throws Exception {
		try {
			SparkMeterDataPage.loginButtonSparkChanpatiya();
			SparkMeterDataPage.historyTabHomePage();
			SparkMeterDataPage.transactionTabHomePage();
			SparkMeterDataPage.getSparkEmailIdValueFromExcelAgain();
			SparkMeterDataPage.getSparkPasswordValueFromExcelAgain();
			SparkMeterDataPage.loginButtonSparkChanpatiya();
			SparkMeterDataPage.toolBarDropDownTransactionPage();
			SparkMeterDataPage.exportAllResultLinkTransactionSparkData();
		} catch (Exception e) {
			lOGGER.info("Test Case failed:" + e.getMessage());
			throw e;
		}

	}

}
